{"version":3,"sources":["components/images/memoji.png","components/Navbar.js","components/Home.js","components/MachineLearning.js","components/Projects.js","components/GenericProject.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","style","height","src","memoji","Component","Home","MachineLearning","Projects","this","props","projects","map","project","index","img","alt","name","GenericProject","state","projectName","setState","App","path","defaultpath","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,kXCkB5BC,E,uKAdX,OACE,yBAAKC,UAAU,oCACb,yBAAKA,UAAU,2CACb,yBAAKC,MAAO,CAAEC,OAAQ,QAAUC,IAAKC,MADvC,gBAIA,yBAAKJ,UAAU,kCAAf,YACA,yBAAKA,UAAU,kCAAf,oBACA,yBAAKA,UAAU,wBAAf,gB,GAVaK,aCgBNC,E,uKAdX,OACE,yBAAKN,UAAU,oCACb,yBAAKA,UAAU,2CACb,yBAAKC,MAAO,CAAEC,OAAQ,QAAUC,IAAKC,MADvC,gBAIA,yBAAKJ,UAAU,kCAAf,YACA,yBAAKA,UAAU,kCAAf,oBACA,yBAAKA,UAAU,wBAAf,gB,GAVWK,aCQJE,E,uKANX,OACE,yBAAKP,UAAU,oCAAf,wB,GAHwBK,aC0BfG,E,uKAxBX,OACE,yBAAKR,UAAU,gCACZS,KAAKC,MAAMC,SAASC,KAAI,SAACC,EAASC,GAAV,OACvB,yBAAKd,UAAU,cACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,aACb,yBAAKG,IAAKU,EAAQE,IAAKC,IAAI,oBAE7B,yBAAKhB,UAAU,cACb,kBAAC,IAAD,CAAMA,UAAU,kCACba,EAAQI,MAEX,yBAAKjB,UAAU,oBAAf,oB,GAfKK,aCiBRa,E,4MAhBbC,MAAQ,CAAEN,QAAS,M,EACnBO,YAAc,WACZ,OAA0B,MAAtB,EAAKD,MAAMN,QACN,EAAKM,MAAMN,QAAQI,KAEnB,W,kEAITR,KAAKY,SAAS,CAAER,QAASJ,KAAKC,MAAMG,Y,+BAGpC,OAAO,yBAAKb,UAAU,YAAYS,KAAKW,iB,GAbdf,a,QCkCdiB,E,uKAxBX,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQX,SAAUA,IAClB,kBAAC,IAAD,KACGA,EAASC,KAAI,SAACC,EAASC,GAAV,OACZ,kBAAC,IAAD,CAAOS,KAAMV,EAAQU,MACnB,kBAAC,EAAD,CAAgBV,QAASA,QAG7B,kBAAC,IAAD,CAAOU,KAAK,aACV,kBAAC,EAAD,CAAUZ,SAAUA,KAEtB,kBAAC,IAAD,CAAOY,KAAK,OACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,YAAY,SACjB,kBAAC,EAAD,a,GAlBMnB,aCEEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9623c2aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/memoji.37c969d7.png\";","import React, { Component } from \"react\";\nimport memoji from \"./images/memoji.png\";\nclass Navbar extends Component {\n  render() {\n    return (\n      <div className=\"row mx-0 px-3 bg-dark text-light\">\n        <div className=\"btn btn-group btn-dark font-weight-bold\">\n          <img style={{ height: \"20px\" }} src={memoji} />\n          Harjot Singh\n        </div>\n        <div className=\"btn btn-dark font-weight-light\">Projects</div>\n        <div className=\"btn btn-dark font-weight-light\">Machine Learning</div>\n        <div className=\"btn btn-dark ml-auto\">Contact</div>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport memoji from \"./images/memoji.png\";\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"row mx-0 px-3 bg-dark text-light\">\n        <div className=\"btn btn-group btn-dark font-weight-bold\">\n          <img style={{ height: \"20px\" }} src={memoji} />\n          Harjot Singh\n        </div>\n        <div className=\"btn btn-dark font-weight-light\">Projects</div>\n        <div className=\"btn btn-dark font-weight-light\">Machine Learning</div>\n        <div className=\"btn btn-dark ml-auto\">Contact</div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport memoji from \"./images/memoji.png\";\nclass MachineLearning extends Component {\n  render() {\n    return (\n      <div className=\"row mx-0 px-3 bg-dark text-light\">Machine Learning</div>\n    );\n  }\n}\n\nexport default MachineLearning;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nclass Projects extends Component {\n  render() {\n    return (\n      <div className=\"row mx-0 px-3 py-1 text-dark\">\n        {this.props.projects.map((project, index) => (\n          <div className=\"col-6 my-2\">\n            <div className=\"card p-0\">\n              <div className=\"card-body row mx-0 col-12 p-0\">\n                <div className=\"col-3 p-0\">\n                  <img src={project.img} alt=\"Card image cap\" />\n                </div>\n                <div className=\"col-9 px-0\">\n                  <Link className=\"card-title col-12 btn btn-dark\">\n                    {project.name}\n                  </Link>\n                  <div className=\"text-dark col-12\">Yolo</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Projects;\n","import React, { Component } from \"react\";\nimport memoji from \"./images/memoji.png\";\nclass GenericProject extends Component {\n  state = { project: null };\n  projectName = () => {\n    if (this.state.project != null) {\n      return this.state.project.name;\n    } else {\n      return \"Nothing\";\n    }\n  };\n  componentDidMount() {\n    this.setState({ project: this.props.project });\n  }\n  render() {\n    return <div className=\"row mx-0\">{this.projectName}</div>;\n  }\n}\n\nexport default GenericProject;\n","import React, { Component } from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min.js\";\nimport Navbar from \"./Navbar\";\nimport Home from \"./Home\";\nimport MachineLearning from \"./MachineLearning\";\nimport Projects from \"./Projects\";\nimport GenericProject from \"./GenericProject\";\nimport projects from \"./projects.json\";\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <Navbar projects={projects} />\n        <Switch>\n          {projects.map((project, index) => (\n            <Route path={project.path}>\n              <GenericProject project={project} />\n            </Route>\n          ))}\n          <Route path=\"/projects\">\n            <Projects projects={projects} />\n          </Route>\n          <Route path=\"/ml\">\n            <MachineLearning />\n          </Route>\n          <Route defaultpath=\"/home\">\n            <Home />\n          </Route>\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}